{
  "info": {
    "name": "Distributed Calculator Postman Collection",
    "_postman_id": "abc12345-6789-0abc-def0-1234567890ab",
    "description": "Коллекция тестов для проверки API распределённого калькулятора арифметических выражений.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Frontend",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            ""
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Calculate Expression (Valid)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{ \"expression\": \"2+2*(2+5)*3\" }"
        },
        "url": {
          "raw": "http://localhost:8080/api/v1/calculate",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "api",
            "v1",
            "calculate"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "var jsonData = pm.response.json();",
              "pm.test(\"Response contains id\", function () {",
              "    pm.expect(jsonData).to.have.property('id');",
              "});",
              "",
              "if(jsonData.id){",
              "    pm.environment.set(\"expressionId\", jsonData.id);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Calculate Expression (Invalid)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{ \"expression\": \"2+*3\" }"
        },
        "url": {
          "raw": "http://localhost:8080/api/v1/calculate",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "api",
            "v1",
            "calculate"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 422\", function () {",
              "    pm.response.to.have.status(422);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get All Expressions",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/api/v1/expressions",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "api",
            "v1",
            "expressions"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "var jsonData = pm.response.json();",
              "pm.test(\"Response contains expressions array\", function () {",
              "    pm.expect(jsonData).to.have.property('expressions');",
              "    pm.expect(jsonData.expressions).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Expression by ID (Valid)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/api/v1/expressions/{{expressionId}}",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "api",
            "v1",
            "expressions",
            "{{expressionId}}"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "var jsonData = pm.response.json();",
              "pm.test(\"Response contains expression object\", function () {",
              "    pm.expect(jsonData).to.have.property('expression');",
              "    pm.expect(jsonData.expression).to.have.property('id');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Expression by ID (Not Found)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/api/v1/expressions/99999",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "api",
            "v1",
            "expressions",
            "99999"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Task",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/internal/task",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "internal",
            "task"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    var jsonData = pm.response.json();",
              "    pm.test(\"Response contains task object\", function () {",
              "        pm.expect(jsonData).to.have.property('task');",
              "        pm.expect(jsonData.task).to.have.property('id');",
              "    });",
              "} else {",
              "    pm.test(\"No tasks available (status 404)\", function () {",
              "        pm.response.to.have.status(404);",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Post Task Result",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{ \"id\": 1, \"result\": 6 }"
        },
        "url": {
          "raw": "http://localhost:8080/internal/task",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "internal",
            "task"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    var jsonData = pm.response.json();",
              "    pm.test(\"Result post is ok\", function () {",
              "        pm.expect(jsonData).to.have.property('status', 'ok');",
              "    });",
              "} else {",
              "    pm.test(\"Task not found or invalid data\", function () {",
              "        pm.response.to.have.status.oneOf([404,422]);",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "variable": []
}
